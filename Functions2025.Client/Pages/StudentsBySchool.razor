@page "/students-by-school"
@using Functions2025.Models.School
@using Functions2025.Client.Services
@inject StudentService StudentService
@inject IJSRuntime JSRuntime

<h3>Students by School</h3>

<div class="form-group">
    <label for="schoolInput">School Name:</label>
    <input id="schoolInput" class="form-control" @bind="schoolName" />
    <button class="btn btn-primary mt-2" @onclick="LoadStudents">Search</button>
    <button class="btn btn-success mt-2 ms-2" @onclick="() => ShowAddStudentForm()">Add New Student</button>
</div>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (students != null && students.Any())
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>School</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.StudentId</td>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                    <td>@student.School</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditStudent(student)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteStudent(student.StudentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (!string.IsNullOrEmpty(schoolName))
{
    <p class="mt-3">No students found for school: @schoolName</p>
}

@if (showStudentForm)
{
    <div class="card mt-4">
        <div class="card-header">
            @(editingStudent?.StudentId > 0 ? "Edit Student" : "Add New Student")
        </div>
        <div class="card-body">
            <div class="form-group mb-3">
                <label for="firstName">First Name:</label>
                <input id="firstName" class="form-control" @bind="currentStudent.FirstName" />
            </div>
            <div class="form-group mb-3">
                <label for="lastName">Last Name:</label>
                <input id="lastName" class="form-control" @bind="currentStudent.LastName" />
            </div>
            <div class="form-group mb-3">
                <label for="studentSchool">School:</label>
                <input id="studentSchool" class="form-control" @bind="currentStudent.School" />
            </div>
            <button class="btn btn-primary" @onclick="SaveStudent">Save</button>
            <button class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
        @message
    </div>
}

@code {
    private string schoolName = "";
    private List<Student>? students;
    private bool isLoading = false;
    private bool showStudentForm = false;
    private Student currentStudent = new Student();
    private Student? editingStudent = null;
    private string message = "";
    private bool isError = false;

    private async Task LoadStudents()
    {
        if (string.IsNullOrWhiteSpace(schoolName))
            return;

        isLoading = true;
        try
        {
            students = await StudentService.GetStudentsBySchoolAsync(schoolName);
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            SetErrorMessage($"Error loading students: {ex.Message}");
        }
    }

    private void ShowAddStudentForm()
    {
        editingStudent = null;
        currentStudent = new Student { School = schoolName };
        showStudentForm = true;
        message = "";
    }

    private void EditStudent(Student student)
    {   
        Console.WriteLine($"Edit button clicked for student ID: {student.StudentId}");
        editingStudent = student;
        currentStudent = new Student
        {
            StudentId = student.StudentId,
            FirstName = student.FirstName,
            LastName = student.LastName,
            School = student.School
        };
        showStudentForm = true;
        message = "";
        StateHasChanged();
    }

    private async Task SaveStudent()
    {
        try
        {
            isLoading = true;
            
            if (string.IsNullOrWhiteSpace(currentStudent.FirstName) || 
                string.IsNullOrWhiteSpace(currentStudent.LastName) || 
                string.IsNullOrWhiteSpace(currentStudent.School))
            {
                SetErrorMessage("Please fill in all fields");
                isLoading = false;
                return;
            }

            if (editingStudent != null)
            {
                // Update existing student
                await StudentService.UpdateStudentAsync(currentStudent.StudentId, currentStudent);
                SetSuccessMessage("Student updated successfully");
            }
            else
            {
                // Create new student
                await StudentService.CreateStudentAsync(currentStudent);
                SetSuccessMessage("Student added successfully");
            }

            showStudentForm = false;
            isLoading = false;
            
            // Reload students with current filter
            if (!string.IsNullOrWhiteSpace(schoolName))
            {
                await LoadStudents();
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            SetErrorMessage($"Error saving student: {ex.Message}");
        }
    }

    private async Task DeleteStudent(int studentId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this student?"))
            return;

        try
        {
            isLoading = true;
            bool result = await StudentService.DeleteStudentAsync(studentId);
            
            if (result)
            {
                SetSuccessMessage("Student deleted successfully");
                // Reload students with current filter
                await LoadStudents();
            }
            else
            {
                SetErrorMessage("Failed to delete student");
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            SetErrorMessage($"Error deleting student: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        showStudentForm = false;
        editingStudent = null;
        currentStudent = new Student();
        message = "";
    }

    private void SetSuccessMessage(string text)
    {
        message = text;
        isError = false;
    }

    private void SetErrorMessage(string text)
    {
        message = text;
        isError = true;
    }
}